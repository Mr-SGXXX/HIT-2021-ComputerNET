define SERVER_IP "127.0.0.1" // 服务器的 IP 地址
#define INPUT_FILE "./input.txt"
#define OUTPUT_FILE "./output.txt"

using namespace std;

const int BUFFER_LENGTH = 1026;
const int SEQ_SIZE = 20;//接收端序列号个数，为 1~20
const int RECV_WIND_SIZE = 10;	//接收窗口大小为 10，SR中满足Wr + Ws <= N（Wr 为接收窗口大小，Ws 为发送窗口大小，N 为序列号个数）
char seqCache[RECV_WIND_SIZE][BUFFER_LENGTH];	//接收窗口缓存
bool ack[RECV_WIND_SIZE];		//ack发送情况，已发送时为true

//初始化套接字
bool initSocket(SOCKET& socketClient, SOCKADDR_IN& addrServer);
//-time 从服务器端获取当前时间
//-quit 退出客户端
//- testsr	[X][Y] 测试 SR 协议实现可靠数据传输
//			[X][0, 1] 模拟数据包丢失的概率
//			[Y][0, 1] 模拟 ACK 丢失的概率
void printTips();
//根据丢失率随机生成一个数字，判断是否丢失, 丢失则返回TRUE，否则返回 FALSE
BOOL lossInLossRatio(float lossRatio);

//SR实现
int main(int argc, char* argv[])
{
	SOCKET socketClient;
	SOCKADDR_IN addrServer;
	if (!initSocket(socketClient, addrServer))
	{
		printf("Failed to init Socket\n"for (int i = 0; i < RECV_WIND_SIZE; i++)
						{
							ack[i] = false;
						}
					}
					break;
				case 1://等待接收数据阶段
					seq = (unsigned short)buffer[0];
					//随机法模拟包是否丢失
					b = lossInLossRatio(packetLossRatio);
					if (b) {
						printf("The packet with a seq of %d loss\n", seq);
						continue;                                                                                      
					}
					printf("Receive a packet with a seq of %d\n", seq);
					//如果接收到窗口范围内的包，接收并缓存，正常确认即可
					if ((seq - waitSeq) % SEQ_SIZE < RECV_WIND_SIZE) {
						memcpy(seqCache[seq % RECV_WIND_SIZE], &buffer[1], BUFFER_LENGTH);
						ack[seq % RECV_WIND_SIZE] = true;
						//输出数据
						if (buffer[1] != '\0' && buffer[1] != '\r') {
							printf("Receive data:\n%s\n", &buffer[1]);
						}
						else{
							
							if (sendSuccessTime >= serverSize && buffer[1] == '\r')	//\r代表发送结束
							{
								printf("Server data sending is over\n");
								recvOver = true;
							}
						}
						int start = waitSeq;
						memset(buffer, 0, BUFFER_LENGTH);
						buffer[0] = seq;
						recvSeq = seq;
						if (totalSeq >= totalPacket)
						{
							if (totalSeq == totalPacket)
								printf("Client data sending is over\n");
							buffer[1] = '\0';
							sendOver = true;
						}
						else 
						{
							//双向传输
							memcpy(&buffer[1], data + 1024 * (totalSeq + seq - waitSeq), 1024);
						}
						while (ack[waitSeq % RECV_WIND_SIZE]
							&& (waitSeq - start) % SEQ_SIZE < RECV_WIND_SIZE)
						{
							//缓存交付
							ack[waitSeq % RECV_WIND_SIZE] = false;
							sendSuccessTime++;
							icout << seqCache[waitSeq % RECV_WIND_SIZE];
							ZeroMemory(seqCache[waitSeq % RECV_WIND_SIZE], BUFFER_LENGTH);
							waitSeq++;
							++totalSeq;
							if (waitSeq == 21) {
								waitSeq = 1;
							}
						}
						//if (sendSuccessTime == serverSize) recvOver = true;
						//seqFlag[seq - 1] = true;
					}
					//如果接收到窗口范围外的包，确认即可
					else if ((seq - waitSeq) % SEQ_SIZE >= RECV_WIND_SIZE && seq < waitSeq) {
						buffer[0] = seq;
						if (totalSeq >= totalPacket)
						{
							printf("Client data sending is over\n");
							buffer[1] = '\0';
							sendOver = true;
						}
						else
						{
							//双向传输
							memcpy(&buffer[1], data + 1024 * (totalSeq + seq - waitSeq), 1024);
						}
					}
					b = lossInLossRatio(ackLossRatio);
					if (b) {
						printf("The ack of %d loss\n", (unsigned char)buffer[0]);
						continue;
					}
					sendto(socketClient, buffer, strlen(buffer) + 1, 0, (SOCKADDR*)&addrServer, sizeof(SOCKADDR));
					printf("send a ack of %d\n", (unsigned char)buffer[0]);
					break;
				}
				Sleep(50);
			}
		}
		else
		{
			sendto(socketClient, buffer, strlen(buffer) + 1, 0, (SOCKADDR*)&addrServer, sizeof(SOCKADDR));
			ret = recvfrom(socketClient, buffer, BUFFER_LENGTH, 0, (SOCKADDR*)&addrServer, &len);
			printf("%s\n", buffer);
			if (!strcmp(buffer, "Good bye!")) {
				break;
			}
		}
		printTips();
	}
	free(buffer);
	free(data);
	closesock